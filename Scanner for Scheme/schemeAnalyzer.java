// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Example.l



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class schemeAnalyzer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\1\6\3\7\1\0\1\10\1\11\1\12\1\13\1\0"+
    "\1\14\1\15\1\16\2\17\6\20\2\21\1\7\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\32\30\1\31\1\32"+
    "\1\33\1\34\1\30\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\30\1\45\1\30\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\30\1\61\1\62\1\63\1\30\3\0\1\7"+
    "\6\0\1\3\32\0\1\1\u01df\0\1\1\177\0\13\1"+
    "\35\0\2\3\5\0\1\1\57\0\1\1\240\0\1\1"+
    "\377\0\u0100\64";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\2\6"+
    "\1\1\1\7\1\10\2\6\1\11\1\4\1\5\13\11"+
    "\1\0\1\12\5\0\1\13\4\0\4\7\4\0\2\10"+
    "\1\14\7\11\1\15\2\11\1\14\6\11\1\0\1\16"+
    "\3\0\1\7\10\0\1\7\5\0\4\7\2\0\1\7"+
    "\3\0\1\7\2\0\1\7\1\0\1\7\2\0\13\11"+
    "\1\14\5\11\3\0\1\7\1\0\2\7\11\0\1\7"+
    "\1\0\2\7\7\0\4\7\3\0\1\7\1\0\2\7"+
    "\1\0\1\7\1\0\1\7\4\0\3\7\3\0\2\11"+
    "\1\14\11\11\1\0\2\7\3\0\1\7\3\0\1\7"+
    "\1\0\1\7\2\0\3\7\3\0\1\7\2\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\2\7\1\0\1\7"+
    "\1\0\2\7\3\0\1\7\1\0\2\7\2\0\2\7"+
    "\5\0\1\7\1\0\1\7\1\0\1\7\1\0\1\11"+
    "\1\0\5\11\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\3\0\2\7\2\0\1\7\1\0\1\7\1\0\1\7"+
    "\2\0\2\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\4\0\2\7\1\0\3\7\1\0\1\7\2\0\2\11"+
    "\1\7\1\0\2\7\1\0\2\7\1\0\1\7\2\0"+
    "\1\11\1\14\7\0\1\15\5\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\65\0\65\0\152\0\237\0\65\0\65"+
    "\0\65\0\324\0\u0109\0\u013e\0\u0173\0\u01a8\0\u01dd\0\u0212"+
    "\0\u0212\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350"+
    "\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\152\0\152\0\u048e"+
    "\0\u04c3\0\u04f8\0\u052d\0\u0562\0\65\0\u0597\0\u05cc\0\u0601"+
    "\0\u0636\0\u066b\0\65\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774"+
    "\0\u07a9\0\u07de\0\u0813\0\65\0\u0848\0\u087d\0\u08b2\0\u08e7"+
    "\0\u091c\0\u0951\0\u0986\0\u0212\0\u09bb\0\u09f0\0\u0212\0\u0a25"+
    "\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\65\0\u0b98"+
    "\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\324\0\u0109\0\u0cd6"+
    "\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e"+
    "\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026"+
    "\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce"+
    "\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376"+
    "\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e"+
    "\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6"+
    "\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804\0\u1839\0\u186e"+
    "\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16"+
    "\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe"+
    "\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66"+
    "\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e"+
    "\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u2081\0\u20b6"+
    "\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4\0\u2229\0\u225e"+
    "\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u239c\0\u23d1\0\u2406"+
    "\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f\0\u2544\0\u2579\0\u25ae"+
    "\0\u25e3\0\u2618\0\u264d\0\u2682\0\u26b7\0\u26ec\0\u2721\0\u2756"+
    "\0\u278b\0\u27c0\0\u27f5\0\u282a\0\u285f\0\u2894\0\u28c9\0\u28fe"+
    "\0\u2933\0\u2968\0\u299d\0\u29d2\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6"+
    "\0\u2adb\0\u2b10\0\u2b45\0\u2b7a\0\u2baf\0\u2be4\0\u2c19\0\u2c4e"+
    "\0\u2c83\0\u2cb8\0\u2ced\0\u2d22\0\u2d57\0\u2d8c\0\u2dc1\0\u2df6"+
    "\0\u2e2b\0\u2e60\0\u2e95\0\u2eca\0\u2eff\0\u2eff\0\u2f34\0\u2f69"+
    "\0\u2f9e\0\u2fd3\0\u3008\0\u303d\0\u3072\0\u30a7\0\u30dc\0\u3111"+
    "\0\u3146\0\u317b\0\u31b0\0\u31e5\0\u321a\0\u324f\0\u3284\0\u32b9"+
    "\0\u32ee\0\u3323\0\u3358\0\u338d\0\u33c2\0\u33f7\0\u342c\0\u3461"+
    "\0\u3496\0\u34cb\0\u3500\0\u3535\0\u356a\0\u359f\0\u35d4\0\u3609"+
    "\0\u363e\0\u3673\0\u36a8\0\u36dd\0\u3712\0\u3747\0\u377c\0\u37b1"+
    "\0\u37e6\0\u381b\0\u3850\0\u3885\0\u38ba\0\u38ef\0\u3924\0\u3959"+
    "\0\u398e\0\u39c3\0\u39f8\0\u3a2d\0\u3a62\0\u3a97\0\u3acc\0\u3b01"+
    "\0\u3b36\0\u3b6b\0\u3ba0\0\u3bd5\0\u3c0a\0\u3c3f\0\u3c74\0\u3ca9"+
    "\0\u3cde\0\u3d13\0\u3d48\0\u3d7d\0\u3db2\0\u3de7\0\65\0\u3e1c"+
    "\0\u3e51\0\u3e86\0\u3ebb\0\u3ef0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\2\1\5\1\6\1\2"+
    "\1\7\1\10\1\11\2\12\1\13\1\11\3\14\1\15"+
    "\1\16\1\17\1\16\2\2\1\20\1\21\1\20\1\22"+
    "\2\20\1\23\1\24\1\25\1\26\1\27\2\20\1\30"+
    "\1\20\1\31\2\20\1\32\1\20\1\33\1\20\1\34"+
    "\1\20\1\35\3\20\1\2\66\0\3\36\1\0\1\37"+
    "\11\0\3\36\6\0\1\36\1\0\1\36\3\0\26\36"+
    "\3\0\1\40\27\0\1\41\4\0\1\42\1\0\1\43"+
    "\1\44\1\45\1\0\1\44\4\0\1\46\3\0\1\47"+
    "\1\45\2\0\1\50\17\0\1\51\1\0\3\52\23\0"+
    "\1\53\36\0\3\54\51\0\1\55\4\0\2\56\1\54"+
    "\1\57\3\14\5\0\1\60\11\0\3\61\3\0\1\61"+
    "\6\0\1\61\6\0\2\15\2\0\1\15\1\62\1\63"+
    "\55\15\25\0\1\11\65\0\1\64\56\0\3\20\6\0"+
    "\34\20\20\0\3\20\6\0\10\20\1\65\10\20\1\66"+
    "\12\20\20\0\3\20\6\0\12\20\1\67\3\20\1\70"+
    "\15\20\20\0\3\20\6\0\6\20\1\71\2\20\1\32"+
    "\10\20\1\72\11\20\20\0\3\20\6\0\12\20\1\73"+
    "\7\20\1\74\11\20\20\0\3\20\6\0\17\20\1\75"+
    "\1\76\13\20\20\0\3\20\6\0\13\20\1\77\20\20"+
    "\20\0\3\20\6\0\6\20\1\100\3\20\1\101\2\20"+
    "\1\102\16\20\20\0\3\20\6\0\25\20\1\77\6\20"+
    "\20\0\3\20\6\0\30\20\1\103\3\20\20\0\3\20"+
    "\6\0\12\20\1\104\21\20\20\0\3\20\6\0\21\20"+
    "\1\105\12\20\43\0\1\106\26\0\1\107\2\0\1\107"+
    "\2\0\1\107\3\0\4\107\1\0\4\107\1\0\1\107"+
    "\3\0\1\107\1\0\26\107\7\0\1\110\4\0\2\111"+
    "\1\112\1\0\1\113\2\114\51\0\1\115\4\0\2\116"+
    "\1\117\1\0\3\14\51\0\1\120\4\0\2\116\1\117"+
    "\1\0\3\14\51\0\1\121\4\0\2\122\1\123\1\0"+
    "\2\124\1\125\116\0\1\126\17\0\1\127\4\0\2\130"+
    "\1\131\1\0\3\132\14\0\6\133\40\0\3\134\51\0"+
    "\1\135\4\0\2\56\1\134\1\136\3\52\5\0\1\60"+
    "\11\0\3\137\1\0\1\53\1\0\1\137\6\0\1\137"+
    "\14\0\1\140\4\0\2\56\2\0\3\54\5\0\1\60"+
    "\11\0\3\61\3\0\1\61\6\0\1\61\14\0\1\55"+
    "\4\0\2\56\1\141\1\57\10\0\1\60\11\0\3\61"+
    "\3\0\1\61\6\0\1\61\23\0\1\142\1\0\3\143"+
    "\23\0\1\53\36\0\3\144\56\0\2\145\1\146\1\0"+
    "\3\147\56\0\2\150\2\0\3\151\43\0\1\15\1\62"+
    "\2\152\1\15\1\62\1\63\10\15\3\62\6\15\1\62"+
    "\1\15\1\62\3\15\26\62\1\0\2\15\1\153\1\0"+
    "\1\15\1\62\1\63\55\15\20\0\3\20\6\0\10\20"+
    "\1\154\23\20\20\0\3\20\6\0\11\20\1\74\22\20"+
    "\20\0\3\20\6\0\14\20\1\155\17\20\20\0\3\20"+
    "\6\0\23\20\1\156\10\20\20\0\3\20\6\0\25\20"+
    "\1\77\1\157\5\20\20\0\3\20\6\0\21\20\1\160"+
    "\12\20\20\0\3\20\6\0\10\20\1\161\2\20\1\162"+
    "\3\20\1\163\14\20\20\0\3\20\6\0\26\20\1\164"+
    "\5\20\20\0\3\20\6\0\23\20\1\165\10\20\20\0"+
    "\3\20\6\0\20\20\1\166\13\20\20\0\3\20\6\0"+
    "\27\20\1\167\4\20\20\0\3\20\6\0\26\20\1\170"+
    "\5\20\20\0\3\20\6\0\6\20\1\171\13\20\1\172"+
    "\11\20\20\0\3\20\6\0\27\20\1\173\4\20\20\0"+
    "\3\20\6\0\24\20\1\174\7\20\62\0\1\175\45\0"+
    "\1\176\2\0\1\176\34\0\1\177\1\0\1\200\2\201"+
    "\23\0\1\53\36\0\3\202\51\0\1\203\4\0\2\204"+
    "\1\202\1\205\1\113\2\114\5\0\1\206\11\0\3\207"+
    "\3\0\1\207\6\0\1\207\14\0\1\210\6\0\1\202"+
    "\1\0\3\114\17\0\3\207\3\0\1\207\6\0\1\207"+
    "\50\0\1\211\2\0\1\211\56\0\1\176\1\0\1\211"+
    "\10\0\1\212\7\0\1\213\44\0\1\212\2\0\1\212"+
    "\34\0\1\214\1\0\2\215\1\216\23\0\1\53\36\0"+
    "\3\217\51\0\1\220\4\0\2\221\1\217\1\222\2\124"+
    "\1\125\5\0\1\223\11\0\3\224\3\0\1\224\6\0"+
    "\1\224\14\0\1\225\6\0\1\217\1\0\3\125\17\0"+
    "\3\224\3\0\1\224\6\0\1\224\44\0\1\226\70\0"+
    "\1\213\2\0\1\213\34\0\1\227\1\0\3\230\14\0"+
    "\6\231\1\0\1\53\36\0\3\232\51\0\1\233\4\0"+
    "\2\234\1\232\1\235\3\132\5\0\1\236\6\0\3\133"+
    "\3\237\3\0\1\240\6\0\1\240\14\0\1\241\4\0"+
    "\2\234\1\0\1\235\3\133\5\0\1\236\6\0\6\133"+
    "\27\0\1\242\4\0\2\56\2\0\3\134\5\0\1\60"+
    "\11\0\3\137\1\0\1\53\1\0\1\137\6\0\1\137"+
    "\14\0\1\135\4\0\2\56\1\243\1\136\10\0\1\60"+
    "\11\0\3\137\1\0\1\53\1\0\1\137\6\0\1\137"+
    "\25\0\3\244\56\0\2\245\2\0\3\246\51\0\1\140"+
    "\4\0\2\56\12\0\1\60\11\0\3\61\3\0\1\61"+
    "\6\0\1\61\14\0\1\140\75\0\3\247\51\0\1\250"+
    "\6\0\1\247\1\251\3\143\17\0\3\252\1\0\1\53"+
    "\1\0\1\252\6\0\1\252\14\0\1\253\4\0\2\56"+
    "\2\0\3\144\5\0\1\60\52\0\1\146\1\0\3\147"+
    "\62\0\3\254\51\0\1\255\6\0\1\254\1\256\3\147"+
    "\17\0\3\257\3\0\1\257\6\0\1\257\25\0\3\151"+
    "\56\0\2\56\2\0\3\151\5\0\1\60\36\0\3\152"+
    "\1\0\1\62\11\0\3\152\6\0\1\152\1\0\1\152"+
    "\3\0\26\152\43\0\1\260\41\0\3\20\6\0\12\20"+
    "\1\261\21\20\20\0\3\20\6\0\15\20\1\262\16\20"+
    "\20\0\3\20\6\0\27\20\1\74\4\20\20\0\3\20"+
    "\6\0\12\20\1\74\21\20\20\0\3\20\6\0\11\20"+
    "\1\74\14\20\1\263\5\20\20\0\3\20\6\0\17\20"+
    "\1\264\14\20\20\0\3\20\6\0\15\20\1\265\16\20"+
    "\20\0\3\20\6\0\6\20\1\266\25\20\20\0\3\20"+
    "\6\0\12\20\1\77\21\20\20\0\3\20\6\0\27\20"+
    "\1\267\4\20\20\0\3\20\6\0\7\20\1\270\24\20"+
    "\13\0\1\64\4\0\3\20\6\0\25\20\1\271\6\20"+
    "\20\0\3\20\6\0\27\20\1\272\4\20\20\0\3\20"+
    "\6\0\26\20\1\273\5\20\20\0\3\20\6\0\27\20"+
    "\1\164\4\20\5\0\1\64\12\0\3\20\6\0\34\20"+
    "\20\0\3\20\6\0\30\20\1\274\3\20\50\0\1\275"+
    "\30\0\2\111\1\112\1\0\1\113\2\114\62\0\3\276"+
    "\51\0\1\277\4\0\2\204\1\276\1\300\1\200\2\201"+
    "\5\0\1\206\11\0\3\301\1\0\1\53\1\0\1\301"+
    "\6\0\1\301\14\0\1\302\6\0\1\276\1\0\3\201"+
    "\17\0\3\301\3\0\1\301\6\0\1\301\14\0\1\303"+
    "\4\0\2\204\2\0\3\202\5\0\1\206\11\0\3\207"+
    "\3\0\1\207\6\0\1\207\14\0\1\203\4\0\2\204"+
    "\1\304\1\205\10\0\1\206\11\0\3\207\3\0\1\207"+
    "\6\0\1\207\23\0\1\142\1\0\1\305\2\306\23\0"+
    "\1\53\36\0\1\307\60\0\2\310\1\146\1\0\1\311"+
    "\2\312\56\0\2\313\2\0\3\314\51\0\1\210\6\0"+
    "\1\304\23\0\3\207\3\0\1\207\6\0\1\207\21\0"+
    "\2\116\1\117\1\0\3\14\56\0\2\122\1\123\1\0"+
    "\2\124\1\125\56\0\2\130\1\131\1\0\3\132\14\0"+
    "\6\133\40\0\3\315\51\0\1\316\4\0\2\221\1\315"+
    "\1\317\2\215\1\216\5\0\1\223\11\0\3\320\1\0"+
    "\1\53\1\0\1\320\6\0\1\320\14\0\1\321\6\0"+
    "\1\315\1\0\3\216\17\0\3\320\3\0\1\320\6\0"+
    "\1\320\14\0\1\322\4\0\2\221\2\0\3\217\5\0"+
    "\1\223\11\0\3\224\3\0\1\224\6\0\1\224\14\0"+
    "\1\220\4\0\2\221\1\323\1\222\10\0\1\223\11\0"+
    "\3\224\3\0\1\224\6\0\1\224\23\0\1\142\1\0"+
    "\2\324\1\306\23\0\1\53\36\0\2\325\57\0\2\326"+
    "\1\146\1\0\2\327\1\312\56\0\2\330\2\0\3\331"+
    "\51\0\1\225\6\0\1\323\23\0\3\224\3\0\1\224"+
    "\6\0\1\224\46\0\1\332\43\0\3\333\51\0\1\334"+
    "\4\0\2\234\1\333\1\335\3\230\5\0\1\236\6\0"+
    "\3\231\3\336\1\0\1\53\1\0\1\337\6\0\1\337"+
    "\14\0\1\340\4\0\2\234\1\0\1\335\3\231\5\0"+
    "\1\236\6\0\6\231\1\0\1\53\25\0\1\341\4\0"+
    "\2\234\2\0\3\232\5\0\1\236\11\0\3\240\3\0"+
    "\1\240\6\0\1\240\14\0\1\233\4\0\2\234\1\342"+
    "\1\235\10\0\1\236\11\0\3\240\3\0\1\240\6\0"+
    "\1\240\23\0\1\142\1\0\3\343\14\0\6\344\1\0"+
    "\1\53\36\0\3\345\14\0\6\345\34\0\2\346\1\146"+
    "\1\0\3\347\14\0\6\350\27\0\1\241\4\0\2\351"+
    "\1\0\1\235\3\133\5\0\1\236\6\0\6\133\34\0"+
    "\2\352\2\0\3\353\51\0\1\241\4\0\2\234\1\0"+
    "\1\235\10\0\1\236\43\0\1\242\4\0\2\56\12\0"+
    "\1\60\11\0\3\137\1\0\1\53\1\0\1\137\6\0"+
    "\1\137\14\0\1\242\64\0\1\354\4\0\2\56\2\0"+
    "\3\244\5\0\1\60\15\0\1\53\36\0\3\246\56\0"+
    "\2\56\2\0\3\246\5\0\1\60\15\0\1\53\25\0"+
    "\1\355\10\0\3\247\17\0\3\252\1\0\1\53\1\0"+
    "\1\252\6\0\1\252\14\0\1\250\6\0\1\356\1\251"+
    "\22\0\3\252\1\0\1\53\1\0\1\252\6\0\1\252"+
    "\25\0\3\357\56\0\2\360\2\0\3\361\51\0\1\253"+
    "\4\0\2\56\12\0\1\60\43\0\1\362\10\0\3\254"+
    "\17\0\3\257\3\0\1\257\6\0\1\257\14\0\1\255"+
    "\6\0\1\363\1\256\22\0\3\257\3\0\1\257\6\0"+
    "\1\257\25\0\3\364\56\0\2\365\2\0\3\366\124\0"+
    "\1\367\22\0\3\20\6\0\26\20\1\370\5\20\20\0"+
    "\3\20\6\0\21\20\1\74\12\20\15\0\1\371\2\0"+
    "\3\20\6\0\34\20\20\0\3\20\6\0\6\20\1\372"+
    "\25\20\20\0\3\20\6\0\21\20\1\157\12\20\20\0"+
    "\3\20\6\0\33\20\1\74\20\0\3\20\6\0\33\20"+
    "\1\272\20\0\3\20\6\0\11\20\1\373\22\20\20\0"+
    "\3\20\6\0\12\20\1\374\21\20\20\0\3\20\4\0"+
    "\1\64\1\0\34\20\20\0\3\20\6\0\15\20\1\375"+
    "\16\20\20\0\3\20\6\0\22\20\1\376\11\20\46\0"+
    "\1\377\25\0\1\u0100\4\0\2\204\2\0\3\276\5\0"+
    "\1\206\11\0\3\301\1\0\1\53\1\0\1\301\6\0"+
    "\1\301\14\0\1\277\4\0\2\204\1\u0101\1\300\10\0"+
    "\1\206\11\0\3\301\1\0\1\53\1\0\1\301\6\0"+
    "\1\301\25\0\1\u0102\60\0\2\u0103\2\0\3\u0104\51\0"+
    "\1\302\6\0\1\u0101\23\0\3\301\3\0\1\301\6\0"+
    "\1\301\14\0\1\303\4\0\2\204\12\0\1\206\11\0"+
    "\3\207\3\0\1\207\6\0\1\207\14\0\1\303\64\0"+
    "\1\u0105\6\0\1\247\1\u0106\1\305\2\306\17\0\3\252"+
    "\1\0\1\53\1\0\1\252\6\0\1\252\14\0\1\u0107"+
    "\6\0\1\247\1\0\3\306\17\0\3\252\3\0\1\252"+
    "\6\0\1\252\14\0\1\u0108\4\0\2\204\2\0\1\307"+
    "\7\0\1\206\52\0\1\146\1\0\1\311\2\312\51\0"+
    "\1\u0109\6\0\1\254\1\u010a\1\311\2\312\17\0\3\257"+
    "\3\0\1\257\6\0\1\257\14\0\1\u010b\6\0\1\254"+
    "\1\0\3\312\17\0\3\257\3\0\1\257\6\0\1\257"+
    "\25\0\3\314\56\0\2\204\2\0\3\314\5\0\1\206"+
    "\43\0\1\u010c\4\0\2\221\2\0\3\315\5\0\1\223"+
    "\11\0\3\320\1\0\1\53\1\0\1\320\6\0\1\320"+
    "\14\0\1\316\4\0\2\221\1\u010d\1\317\10\0\1\223"+
    "\11\0\3\320\1\0\1\53\1\0\1\320\6\0\1\320"+
    "\25\0\2\u010e\57\0\2\u010f\2\0\3\u0110\51\0\1\321"+
    "\6\0\1\u010d\23\0\3\320\3\0\1\320\6\0\1\320"+
    "\14\0\1\322\4\0\2\221\12\0\1\223\11\0\3\224"+
    "\3\0\1\224\6\0\1\224\14\0\1\322\64\0\1\u0111"+
    "\6\0\1\247\1\u0112\2\324\1\306\17\0\3\252\1\0"+
    "\1\53\1\0\1\252\6\0\1\252\14\0\1\u0113\4\0"+
    "\2\221\2\0\2\325\6\0\1\223\52\0\1\146\1\0"+
    "\2\327\1\312\51\0\1\u0114\6\0\1\254\1\u0115\2\327"+
    "\1\312\17\0\3\257\3\0\1\257\6\0\1\257\25\0"+
    "\3\331\56\0\2\221\2\0\3\331\5\0\1\223\77\0"+
    "\1\107\30\0\1\u0116\4\0\2\234\2\0\3\333\5\0"+
    "\1\236\11\0\3\337\1\0\1\53\1\0\1\337\6\0"+
    "\1\337\14\0\1\334\4\0\2\234\1\u0117\1\335\10\0"+
    "\1\236\11\0\3\337\1\0\1\53\1\0\1\337\6\0"+
    "\1\337\25\0\3\u0118\14\0\6\u0118\27\0\1\340\4\0"+
    "\2\351\1\0\1\335\3\231\5\0\1\236\6\0\6\231"+
    "\1\0\1\53\32\0\2\u0119\2\0\3\u011a\51\0\1\340"+
    "\4\0\2\234\1\0\1\335\10\0\1\236\15\0\1\53"+
    "\25\0\1\341\4\0\2\234\12\0\1\236\11\0\3\240"+
    "\3\0\1\240\6\0\1\240\14\0\1\341\64\0\1\u011b"+
    "\6\0\1\247\1\u011c\3\343\14\0\3\344\3\u011d\1\0"+
    "\1\53\1\0\1\252\6\0\1\252\14\0\1\u011e\7\0"+
    "\1\u011c\3\344\14\0\6\344\1\0\1\53\25\0\1\u011f"+
    "\4\0\2\234\2\0\3\345\5\0\1\236\6\0\6\345"+
    "\36\0\1\146\1\0\3\347\14\0\6\350\27\0\1\u0120"+
    "\6\0\1\254\1\u0121\3\347\14\0\3\350\3\u0122\3\0"+
    "\1\257\6\0\1\257\14\0\1\u0123\7\0\1\u0121\3\350"+
    "\14\0\6\350\36\0\1\142\1\0\3\u0124\14\0\6\344"+
    "\1\0\1\53\36\0\3\353\56\0\2\234\2\0\3\353"+
    "\5\0\1\236\43\0\1\354\4\0\2\56\12\0\1\60"+
    "\15\0\1\53\25\0\1\355\32\0\3\252\1\0\1\53"+
    "\1\0\1\252\6\0\1\252\14\0\1\355\64\0\1\u0125"+
    "\10\0\3\357\23\0\1\53\36\0\3\361\62\0\3\361"+
    "\23\0\1\53\25\0\1\362\32\0\3\257\3\0\1\257"+
    "\6\0\1\257\14\0\1\362\64\0\1\u0126\10\0\3\364"+
    "\62\0\3\366\112\0\1\u0127\34\0\3\20\6\0\26\20"+
    "\1\74\5\20\57\0\1\u0128\25\0\3\20\6\0\25\20"+
    "\1\157\6\20\20\0\3\20\6\0\6\20\1\74\25\20"+
    "\20\0\3\20\6\0\10\20\1\77\23\20\20\0\3\20"+
    "\6\0\24\20\1\u0129\7\20\20\0\3\20\6\0\27\20"+
    "\1\u012a\4\20\52\0\1\332\21\0\1\u0100\4\0\2\204"+
    "\12\0\1\206\11\0\3\301\1\0\1\53\1\0\1\301"+
    "\6\0\1\301\14\0\1\u0100\64\0\1\u012b\4\0\2\204"+
    "\2\0\1\u0102\7\0\1\206\15\0\1\53\36\0\3\u0104"+
    "\56\0\2\204\2\0\3\u0104\5\0\1\206\15\0\1\53"+
    "\25\0\1\u0105\6\0\1\356\1\u0106\22\0\3\252\1\0"+
    "\1\53\1\0\1\252\6\0\1\252\25\0\1\u012c\53\0"+
    "\1\u0107\6\0\1\356\23\0\3\252\3\0\1\252\6\0"+
    "\1\252\14\0\1\u0108\4\0\2\204\12\0\1\206\43\0"+
    "\1\u0109\6\0\1\363\1\u010a\22\0\3\257\3\0\1\257"+
    "\6\0\1\257\25\0\1\u012d\53\0\1\u010b\6\0\1\363"+
    "\23\0\3\257\3\0\1\257\6\0\1\257\14\0\1\u010c"+
    "\4\0\2\221\12\0\1\223\11\0\3\320\1\0\1\53"+
    "\1\0\1\320\6\0\1\320\14\0\1\u010c\64\0\1\u012e"+
    "\4\0\2\221\2\0\2\u010e\6\0\1\223\15\0\1\53"+
    "\36\0\3\u0110\56\0\2\221\2\0\3\u0110\5\0\1\223"+
    "\15\0\1\53\25\0\1\u0111\6\0\1\356\1\u0112\22\0"+
    "\3\252\1\0\1\53\1\0\1\252\6\0\1\252\25\0"+
    "\2\u012f\52\0\1\u0113\4\0\2\221\12\0\1\223\43\0"+
    "\1\u0114\6\0\1\363\1\u0115\22\0\3\257\3\0\1\257"+
    "\6\0\1\257\25\0\2\u0130\52\0\1\u0116\4\0\2\234"+
    "\12\0\1\236\11\0\3\337\1\0\1\53\1\0\1\337"+
    "\6\0\1\337\14\0\1\u0116\64\0\1\u0131\4\0\2\234"+
    "\2\0\3\u0118\5\0\1\236\6\0\6\u0118\1\0\1\53"+
    "\36\0\3\u011a\56\0\2\234\2\0\3\u011a\5\0\1\236"+
    "\15\0\1\53\25\0\1\u011b\6\0\1\356\1\u011c\22\0"+
    "\3\252\1\0\1\53\1\0\1\252\6\0\1\252\25\0"+
    "\3\u0132\14\0\6\u0132\27\0\1\u011e\4\0\2\360\1\0"+
    "\1\u011c\3\344\14\0\6\344\1\0\1\53\25\0\1\u011e"+
    "\7\0\1\u011c\26\0\1\53\25\0\1\u011f\4\0\2\234"+
    "\12\0\1\236\43\0\1\u0120\6\0\1\363\1\u0121\22\0"+
    "\3\257\3\0\1\257\6\0\1\257\25\0\3\u0133\14\0"+
    "\6\u0133\27\0\1\u0123\4\0\2\365\1\0\1\u0121\3\350"+
    "\14\0\6\350\27\0\1\u0123\7\0\1\u0121\54\0\1\u011b"+
    "\4\0\2\234\1\247\1\u011c\3\u0124\5\0\1\236\6\0"+
    "\3\344\3\u011d\1\0\1\53\1\0\1\252\6\0\1\252"+
    "\14\0\1\u0125\36\0\1\53\25\0\1\u0126\123\0\1\u0134"+
    "\76\0\1\u0135\24\0\3\20\6\0\30\20\1\u0136\3\20"+
    "\20\0\3\20\6\0\12\20\1\u0137\21\20\7\0\1\u012b"+
    "\4\0\2\204\12\0\1\206\15\0\1\53\25\0\1\u0125"+
    "\10\0\1\u012c\25\0\1\53\25\0\1\u0126\10\0\1\u012d"+
    "\53\0\1\u012e\4\0\2\221\12\0\1\223\15\0\1\53"+
    "\25\0\1\u0125\10\0\2\u012f\24\0\1\53\25\0\1\u0126"+
    "\10\0\2\u0130\52\0\1\u0131\4\0\2\234\12\0\1\236"+
    "\15\0\1\53\25\0\1\u0125\10\0\3\u0132\14\0\6\u0132"+
    "\1\0\1\53\25\0\1\u0126\10\0\3\u0133\14\0\6\u0133"+
    "\72\0\1\u0138\70\0\1\u0139\26\0\3\20\6\0\22\20"+
    "\1\172\11\20\15\0\1\u013a\2\0\3\20\6\0\34\20"+
    "\43\0\1\15\64\0\1\u013b\100\0\1\u013c\44\0\1\u013d"+
    "\101\0\1\u013e\61\0\1\u013f\63\0\1\u0140\62\0\1\u0141"+
    "\57\0\1\u0142\71\0\1\u0143\70\0\1\u0144\57\0\1\64"+
    "\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16165];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\2\1\3\11\24\1\1\0\1\1\5\0"+
    "\1\11\4\0\1\1\1\11\2\1\4\0\2\1\1\11"+
    "\21\1\1\0\1\11\3\0\1\1\10\0\1\1\5\0"+
    "\4\1\2\0\1\1\3\0\1\1\2\0\1\1\1\0"+
    "\1\1\2\0\21\1\3\0\1\1\1\0\2\1\11\0"+
    "\1\1\1\0\2\1\7\0\4\1\3\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\4\0\3\1\3\0"+
    "\14\1\1\0\2\1\3\0\1\1\3\0\1\1\1\0"+
    "\1\1\2\0\3\1\3\0\1\1\2\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\2\1\3\0\1\1\1\0\2\1\2\0\2\1\5\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\5\1\1\0\1\1\1\0\1\1\1\0\1\1\3\0"+
    "\2\1\2\0\1\1\1\0\1\1\1\0\1\1\2\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\1\1\4\0"+
    "\2\1\1\0\3\1\1\0\1\1\2\0\3\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\2\0\2\1\7\0"+
    "\1\11\5\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  schemeAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print(yytext());
            }
            // fall through
          case 15: break;
          case 2:
            { 
            }
            // fall through
          case 16: break;
          case 3:
            { System.out.print("\n");
            }
            // fall through
          case 17: break;
          case 4:
            { System.out.print("LP ");
            }
            // fall through
          case 18: break;
          case 5:
            { System.out.print("RP ");
            }
            // fall through
          case 19: break;
          case 6:
            { if(yytext().equals("+")){System.out.print("SUMOP ");} else if(yytext().equals("-")){System.out.print("MINOP ");} else if(yytext().equals("/")){System.out.print("DIVOP ");} else if(yytext().equals("<")){System.out.print("LESSTHAN ");} else if(yytext().equals("<=")){System.out.print("LESSEQUALTHAN ");}else if(yytext().equals("=")){System.out.print("EQUALS ");}else if(yytext().equals(">=")){System.out.print("GREATEREQUALTHAN ");} else if(yytext().equals(">")){System.out.print("GREATERTHAN ");}
            }
            // fall through
          case 20: break;
          case 7:
            { System.out.print("NUM ");
            }
            // fall through
          case 21: break;
          case 8:
            { System.out.print("COMMENT ");
            }
            // fall through
          case 22: break;
          case 9:
            { System.out.print("ID ");
            }
            // fall through
          case 23: break;
          case 10:
            { System.out.print("STRING ");
            }
            // fall through
          case 24: break;
          case 11:
            { System.out.print("BOOL ");
            }
            // fall through
          case 25: break;
          case 12:
            { System.out.print("RESERVED ");
            }
            // fall through
          case 26: break;
          case 13:
            { System.out.println("KEYWORD" + ":" + yytext());
            }
            // fall through
          case 27: break;
          case 14:
            { System.out.print("CHAR ");
            }
            // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java schemeAnalyzer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        schemeAnalyzer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new schemeAnalyzer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
